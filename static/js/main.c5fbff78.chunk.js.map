{"version":3,"sources":["App.js","typedDataV4.js","index.js"],"names":["window","sigUtil","ethUtil","provider","ethereum","providerName","msgParams","JSON","stringify","domain","chainId","name","verifyingContract","version","message","contents","attachedMoneyInEth","from","wallets","to","primaryType","types","EIP712Domain","type","Group","Mail","Person","providerRequest","method","params","arguments","length","undefined","options","payload","_objectSpread","console","log","concat","request","methodsList","eth_requestAccounts","eth_accounts","eth_signTypedData_v4","event","selectedAddress","err","result","dir","error","alert","recovered","data","parse","sig","eth_sendTransaction__approveTokenAmount_usdc","gas","eth_sendTransaction__approveTokenAmount_max_usdc","cfx_approveTokenAmount","storageLimit","gasPrice","cfx_approveTokenAmount_max","eth_sendTransaction__swapEthToUsdc","value","eth_sendTransaction__swapCfxToUsdc","metamask_getProviderState","eth_chainId","App","_jsxs","className","children","_jsx","onChange","e","target","href","Object","entries","map","_ref","_ref2","_slicedToArray","k","v","onClick","then","res","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c5fbff78.chunk.js","sourcesContent":["import \"./styles.css\";\nimport * as sigUtil from \"eth-sig-util\";\nimport * as ethUtil from \"ethereumjs-util\";\nimport typedDataV4 from \"./typedDataV4\";\n/*\nhttps://docs.metamask.io/guide/signing-data.html#sign-typed-data-v4\n*/\n\nwindow.sigUtil = sigUtil;\nwindow.ethUtil = ethUtil;\n\nlet provider = window.ethereum;\nlet providerName = \"ethereum\";\n\n// let provider = window.conflux;\n// let providerName = \"conflux\";\n\nconst msgParams = JSON.stringify(typedDataV4);\n\nfunction providerRequest(method, params = [], options = {}) {\n  const payload = {\n    method,\n    params,\n    ...options\n  };\n  console.log(`window.${providerName}.request(${JSON.stringify(payload)})\n  .then(console.log)\n  `);\n  return provider.request(payload);\n}\n\nfunction eth_signTypedData_v4(event) {\n  // event.preventDefault();\n\n  var from = provider.selectedAddress;\n\n  var params = [from, msgParams];\n  var method = \"eth_signTypedData_v4\";\n\n  return provider.request(\n    {\n      method,\n      params,\n      from\n    },\n    function (err, result) {\n      if (err) return console.dir(err);\n      if (result.error) {\n        alert(result.error.message);\n      }\n      if (result.error) return console.error(\"ERROR\", result);\n      console.log(\"TYPED SIGNED:\" + JSON.stringify(result.result));\n\n      const recovered = sigUtil.recoverTypedSignature_v4({\n        data: JSON.parse(msgParams),\n        sig: result.result\n      });\n\n      if (\n        ethUtil.toChecksumAddress(recovered) === ethUtil.toChecksumAddress(from)\n      ) {\n        alert(\"Successfully recovered signer as \" + from);\n      } else {\n        alert(\n          \"Failed to verify signer when comparing \" + result + \" to \" + from\n        );\n      }\n    }\n  );\n}\n\nfunction eth_accounts() {\n  return providerRequest(\"eth_accounts\");\n}\n\nfunction eth_requestAccounts() {\n  return providerRequest(\"eth_requestAccounts\");\n}\n\nfunction eth_sendTransaction__approveTokenAmount_max_usdc() {\n  return providerRequest(\"eth_sendTransaction\", [\n    {\n      data:\n        \"0x095ea7b3000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n      from: \"0x67e49a99843325b4a7ed43effb1da911540c86a6\",\n      gas: \"0x99999\", // gasLimit\n      // 钱包必须选择 rinkeby ，其他链无法显示正确的 USDC token\n      // https://rinkeby.etherscan.io/token/0x4dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b\n      to: \"0x4dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b\"\n    }\n  ]);\n}\n\nfunction eth_sendTransaction__approveTokenAmount_usdc() {\n  return providerRequest(\"eth_sendTransaction\", [\n    {\n      data:\n        \"0x095ea7b3000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000010\",\n      from: \"0x67e49a99843325b4a7ed43effb1da911540c86a6\",\n      gas: \"0x99999\", // gasLimit\n      // https://rinkeby.etherscan.io/token/0x4dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b\n      to: \"0x4dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b\"\n    }\n  ]);\n}\n\nfunction cfx_approveTokenAmount() {\n  return providerRequest(\"eth_sendTransaction\", [\n    {\n      storageLimit: \"0x4c\",\n      gas: \"0x9e05\",\n      gasPrice: \"0x1\",\n      from: \"0x13226782f7a7ea7b47de4a92a7c16ef0ae754c4b\",\n      to: \"cfx:aca13suyk7mbgxw9y3wbjn9vd136swu6s21tg67xmb\",\n      data:\n        \"0x095ea7b300000000000000000000000080ae6a88ce3351e9f729e8199f2871ba786ad7c50000000000000000000000000000000000000000000000000aa93bece0031800\"\n    }\n  ]);\n}\n\nfunction cfx_approveTokenAmount_max() {\n  return providerRequest(\"eth_sendTransaction\", [\n    {\n      storageLimit: \"0x4c\",\n      gas: \"0x9e05\",\n      gasPrice: \"0x1\",\n      from: \"0x13226782f7a7ea7b47de4a92a7c16ef0ae754c4b\",\n      to: \"0x8b8689c7f3014a4d86e4d1d0daaf74a47f5e0f27\",\n      data:\n        \"0x095ea7b300000000000000000000000080ae6a88ce3351e9f729e8199f2871ba786ad7c5ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\n    }\n  ]);\n}\n\nfunction eth_sendTransaction__swapEthToUsdc() {\n  return providerRequest(\"eth_sendTransaction\", [\n    {\n      gas: \"0x27ed9\", // gasLimit\n      value: \"0x1f377610e7e0ef\",\n      from: \"0x67e49a99843325b4a7ed43effb1da911540c86a6\",\n      to: \"0xe592427a0aece92de3edee1f18e0157c05861564\",\n      data:\n        \"0x414bf389000000000000000000000000c778417e063141139fce010982780140aa0cd5ab0000000000000000000000004dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b000000000000000000000000000000000000000000000000000000000000271000000000000000000000000067e49a99843325b4a7ed43effb1da911540c86a60000000000000000000000000000000000000000000000000000000061645a06000000000000000000000000000000000000000000000000001f377610e7e0ef000000000000000000000000000000000000000000000000000000000ea2d3db0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  ]);\n}\n\nfunction eth_sendTransaction__swapCfxToUsdc() {\n  return providerRequest(\"eth_sendTransaction\", [\n    {\n      gas: \"0x27ed9\", // gasLimit\n      value: \"0x10a741a462780000\",\n      from: \"cfxtest:aakwe36c88x8y84h53fkfk8br52m67mpkp63et1ztm\",\n      to: \"cfxtest:aamr93vsstxs457rnhxe99wbxwy1n2bpuet521n5dw\",\n      data:\n        \"0x414bf389000000000000000000000000c778417e063141139fce010982780140aa0cd5ab0000000000000000000000004dbcdf9b62e891a7cec5a2568c3f4faf9e8abe2b000000000000000000000000000000000000000000000000000000000000271000000000000000000000000067e49a99843325b4a7ed43effb1da911540c86a60000000000000000000000000000000000000000000000000000000061645a06000000000000000000000000000000000000000000000000001f377610e7e0ef000000000000000000000000000000000000000000000000000000000ea2d3db0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  ]);\n}\n\nfunction metamask_getProviderState() {\n  return providerRequest(\"metamask_getProviderState\");\n}\n\nfunction eth_chainId() {\n  return providerRequest(\"eth_chainId\");\n}\n\nconst methodsList = {\n  eth_requestAccounts,\n  eth_accounts,\n  eth_signTypedData_v4,\n  eth_sendTransaction__approveTokenAmount_usdc,\n  eth_sendTransaction__approveTokenAmount_max_usdc,\n  cfx_approveTokenAmount,\n  cfx_approveTokenAmount_max,\n  eth_sendTransaction__swapEthToUsdc,\n  eth_sendTransaction__swapCfxToUsdc,\n  metamask_getProviderState,\n  eth_chainId\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>eth_signTypedData_v4</h1>\n      provider:\n      <select\n        onChange={(e) => {\n          provider = window[e.target.value];\n          providerName = e.target.value;\n        }}\n      >\n        <option value=\"conflux\">conflux</option>\n        <option value=\"onekey\">onekey</option>\n        <option value=\"ethereum\">ethereum</option>\n      </select>\n      <p>\n        <a href=\"https://docs.metamask.io/guide/signing-data.html#sign-typed-data-v4\">\n          https://docs.metamask.io/guide/signing-data.html#sign-typed-data-v4\n        </a>\n      </p>\n      {Object.entries(methodsList).map(([k, v]) => {\n        return (\n          <p key={k}>\n            <button\n              onClick={() => {\n                v().then((res) => {\n                  console.log(`------- ${providerName}.${k} -------`);\n                  console.log(res);\n                });\n              }}\n            >\n              {k}\n            </button>\n          </p>\n        );\n      })}\n    </div>\n  );\n}\n","export default {\n  domain: {\n    // Defining the chain aka Rinkeby testnet or Ethereum Main Net\n    chainId: 1,\n    // Give a user friendly name to the specific contract you are signing for.\n    name: \"Ether Mail\",\n    // If name isn't enough add verifying contract to make sure you are establishing contracts with the proper entity\n    verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n    // Just let's you know the latest version. Definitely make sure the field name is correct.\n    version: \"1\"\n  },\n\n  // Defining the message signing data content.\n  message: {\n    /*\n     - Anything you want. Just a JSON Blob that encodes the data you want to send\n     - No required fields\n     - This is DApp Specific\n     - Be as explicit as possible when building out the message schema.\n    */\n    contents: \"Hello, Bob!\",\n    attachedMoneyInEth: 4.2,\n    from: {\n      name: \"Cow\",\n      wallets: [\n        \"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\n        \"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"\n      ]\n    },\n    to: [\n      {\n        name: \"Bob\",\n        wallets: [\n          \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n          \"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\n          \"0xB0B0b0b0b0b0B000000000000000000000000000\"\n        ]\n      }\n    ]\n  },\n  // Refers to the keys of the *types* object below.\n  primaryType: \"Mail\",\n  types: {\n    // TODO: Clarify if EIP712Domain refers to the domain the contract is hosted on\n    EIP712Domain: [\n      { name: \"name\", type: \"string\" },\n      { name: \"version\", type: \"string\" },\n      { name: \"chainId\", type: \"uint256\" },\n      { name: \"verifyingContract\", type: \"address\" }\n    ],\n    // Not an EIP712Domain definition\n    Group: [\n      { name: \"name\", type: \"string\" },\n      { name: \"members\", type: \"Person[]\" }\n    ],\n    // Refer to PrimaryType\n    Mail: [\n      { name: \"from\", type: \"Person\" },\n      { name: \"to\", type: \"Person[]\" },\n      { name: \"contents\", type: \"string\" }\n    ],\n    // Not an EIP712Domain definition\n    Person: [\n      { name: \"name\", type: \"string\" },\n      { name: \"wallets\", type: \"address[]\" }\n    ]\n  }\n};\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}